#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

readonly CONFIG_FILE="$HOME/project_config_for_current_path.yaml"
readonly ALLOWED_WORKFLOWS=("lightorch" "ml-arch" "fusion")
readonly ALLOWED_GH_ACTIONS=("cpp_ci" "python_ci" "pypi_cd" "rust_ci" "zig_ci" "lua_ci")
readonly ALLOWED_PRECOMMITS=("c" "python" "rust" "zig" "lua")
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

log_info() { echo "[INFO] $*" >&2; }
log_error() { echo "[ERROR] $*" >&2; }
log_warning() { echo "[WARNING] $*" >&2; }

trap 'log_error "Error occurred in script at line $LINENO. Exit code: $?"' ERR

check_dependencies() {
    local deps=("yq" "gh" "git")
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "Required dependency not found: $dep"
            exit 1
        fi
    done
}

create_config() {
    local base_config="$HOME/.local/scripts/project_manager/config.yml"
    [[ -f "$CONFIG_FILE" ]] && rm -f "$CONFIG_FILE"
    if [[ ! -f "$base_config" ]]; then
        log_error "Couldn't find the default config.yml"
        exit 1
    else
        cp "$base_config" "$CONFIG_FILE"
    fi
    log_info "Configuration file created at $CONFIG_FILE"
    vim "$CONFIG_FILE" || nano "$CONFIG_FILE"
}

parse_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        log_error "Configuration file not found: $CONFIG_FILE"
        exit 1
    }

    PROJECT_NAME=$(yq eval '.PROJECT_NAME' "$CONFIG_FILE")
    WORKFLOWS=($(yq eval '.WORKFLOWS[]' "$CONFIG_FILE"))
    ACTIONS=($(yq eval '.ACTIONS[]' "$CONFIG_FILE"))
    PRECOMMITS=($(yq eval '.PRECOMMITS[]' "$CONFIG_FILE"))
    DESCRIPTION=$(yq eval '.DESCRIPTION' "$CONFIG_FILE")
    LICENSE=$(yq eval '.LICENSE' "$CONFIG_FILE")
    PUBLIC=$(yq eval '.PUBLIC' "$CONFIG_FILE")

    if [[ -z "$PROJECT_NAME" ]]; then
        log_error "PROJECT_NAME is required"
        exit 1
    fi
    rm -f "$CONFIG_FILE"
}

assert() {
    local invalid_workflows=()
    local invalid_actions=()
    local invalid_precommits=()

    for item in "${WORKFLOWS[@]}"; do
        if [[ ! " ${ALLOWED_WORKFLOWS[*]} " =~ " ${item} " ]]; then
            invalid_workflows+=("$item")
        else
            log_info "Set up workflows for: $item"
        fi
    done

    for item in "${ACTIONS[@]}"; do
        if [[ ! " ${ALLOWED_GH_ACTIONS[*]} " =~ " ${item} " ]]; then
            invalid_actions+=("$item")
        else
            log_info "Set up actions for: $item"
        fi
    done

    for item in "${PRECOMMITS[@]}"; do
        if [[ ! " ${ALLOWED_PRECOMMITS[*]} " =~ " ${item} " ]]; then
            invalid_precommits+=("$item")
        else
            log_info "Set up pre-commits for: $item"
        fi
    done

    if (( ${#invalid_workflows[@]} > 0 )); then
        log_error "Invalid workflows found: ${invalid_workflows[*]}"
        exit 1
    fi

    if (( ${#invalid_actions[@]} > 0 )); then
        log_error "Invalid actions found: ${invalid_actions[*]}"
        exit 1
    fi

    if (( ${#invalid_precommits[@]} > 0 )); then
        log_error "Invalid actions found: ${invalid_actions[*]}"
        exit 1
    fi
}

setup_gh_actions() {
    if [[ -z "$ACTIONS" ]]; then
        local target_path="$HOME/projects/$PROJECT_NAME/.github/workflows/"
        mkdir -p "$target_path"
        for val in "${ACTIONS[@]}"; do
            local source_file="$HOME/.local/scripts/project_manager/workflows/$val.yml"
            [[ -f "$source_file" ]] && cp "$source_file" "$target_path" || log_error "Workflow file not found: $source_file" ; exit 1
        done
    fi
}

setup_precommit() {
    if [[ -z "$PRECOMMITS" ]]; then
        local project_path="$HOME/projects/$PROJECT_NAME"
        local pre_commit_file="$project_path/.pre-commit-config.yaml"
        local base_pre_commit_dir="$HOME/.local/scripts/project_manager/pre-commits"
        {
            echo "repos:"
            echo
                for yaml_file in "$base_pre_commit_dir"/*.yml; do
                    if [[ -f "$yaml_file" && " $PRECOMMITS " =~ $(basename "$yaml_file") ]]; then
                        sed 's/^/  /' "$yaml_file"
                        echo
                    fi
                done
        } > "$pre_commit_file"
        log_info "Pre-commit configuration file created at $pre_commit_file"
        cd "$project_path" || exit
        pre-commit install
    fi
}

setup_repository() {
    check_dependencies
    create_config
    parse_config
    assert

    local cmd_line=("gh" "repo" "create" "$PROJECT_NAME")
    [[ "$PUBLIC" == "true" ]] && cmd_line+=("--public") || cmd_line+=("--private")
    [[ -z $DESCRIPTION ]] && cmd_line+=("--description" "$DESCRIPTION")
    [[ -z $LICENSE ]] && cmd_line+=("--license" "$LICENSE")

    if ! "${cmd_line[@]}"; then
        log_error "Failed to create GitHub repository"
        exit 1
    fi

    setup_gh_actions
    setup_files
    setup_precommit

    git init
    git add .
    git commit -m "Initial commit"
    git push origin main

    log_info "Project $PROJECT_NAME has been set up and linked to remote repository https://github.com/Jorgedavyd/$PROJECT_NAME"
}

main() {
    if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
        setup_repository
    fi
}

main "$@"
